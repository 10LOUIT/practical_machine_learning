predict(modFit, newdata=testing)
library(rpart)
modFit <- train(Species ~ ., method="rpart", data=training)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
data(iris)
library(ggplot2)
library(caret)
library(lattice)
library(caret)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(e1071)
library(rpart)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
library(rattle)
library(GTK+)
install.packages("GTK+")
library(GTK+)
library(GTK)
library(GTK+)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){ lines(1:155, ll[i,], col="grey", lwd=2)}
lines(1:155, apply(ll,2,mean)col="red", lwd=2)
lines(1:155, apply(ll,2,mean),col="red", lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
install.packages("party")
library(party)
install.packages("sandwich")
library(sandwich)
library(party)
library(grid)
library(mvtnorm)
library(modeltools)
library(stats4)
library(strucchange)
library(zoo)
library(party)
library(ElemStatLearn)
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){ lines(1:155, ll[i,], col="grey", lwd=2)}
lines(1:155, apply(ll,2,mean),col="red", lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
library(caret)
library(lattice)
library(ggplot2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature, col="lightgrey", pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit, predictors),pch=19, col="red")
points(ozone$ozone,predict(treebag, predictors),pch=19, col="blue")
data("iris")
library(ggplot2)
data(iris)
data(iris)
library(ggplot2)
library(caret)
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- inTrain[inTrain,]
training <- iris[inTrain,]
testing <- iris[-inTrain,]
-inTrain
inTrain
modFit <- train(Species~ .,data=training, method="rf",prox=TRUE)
modFit <- train(Species~ .,data=training, method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred <- predict(modFit, testing)
testing$predRight <- pred=testing$Species
testing$predRight <- pred=testing$Species
testing$predRight <- pred==testing$Species
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newData Prediction")
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
library(caret)
library(lattice)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
modlda = train(Species~.,data=training,method="lda")
install.packages("mass")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
modnb = train(Species~.,data=testing,method="nb")
modlda = train(Species~.,data=training,method="lda")
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
install.packages(c("caret", "rattle", "Rcpp"))
data(iris)
library(ggplot2)
library(lattice)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
modlda = train(Species~.,data=training,method="lda")
modnb = train(Species~.,data=testing,method="nb")
modnb = train(Species~.,data=testing,method="nb")
modlda = train(Species~.,data=training,method="lda")
modnb = train(Species~.,data=testing,method="nb")
plda = predict(modlda,testing)
plda = predict(modlda,testing)
pnd = predict(modnb,testing)
table(plda,pnb)
table(plda,pnb)
table(plda,pnb)
pnd = predict(modnb,testing)
table(plda,pnb)
modnb = train(Species~.,data=testing,method="nb")
plda = predict(modlda,testing)
pnd = predict(modnb,testing)
table(plda,pnb)
table(plda,pnd)
modlda = train(Species~.,data=training,method="lda")
modnb = train(Species~.,data=testing,method="nb")
plda = predict(modlda,testing)
pnd = predict(modnb,testing)
table(plda,pnd)
equalPredictions = (plda==pnd)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
modnb = train(Species~.,data=testing,method="nb")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage~.,method="gdm",data=training,verbose=FALSE)
install.packages("gdm")
modFit <- train(wage~.,method="gdm",data=training,verbose=FALSE)
modFit <- train(wage~.,method="gdm",data=training,verbose=FALSE)
library("gdm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
modFit <- train(wage~.,method="gdm",data=training,verbose=FALSE)
modFit <- train(wage~.,method="gdm",data=training,verbose=FALSE)
library(gdm)
library(raster)
modFit <- train(wage~.,method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
install.packages("AppliedPredictiveModeling")
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(testing)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(mixtures$CompressiveStrength)
View(testing)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training, method = "pca")
preProcess(training, method = "pca", tresh = 0.90)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$CompressiveStrength)
hist(log(mixtures$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(testing$Superplasticizer)
hist(log(testing$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names <- colnames(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names <- colnames(AlzheimerDisease)
names <- colnames(diagnosis)
names <- names[-length(names)]
names <- colnames(training)
names <- names[-length(names)]
featurePlot(x = training[,names],y = training$CompressiveStrength, plot = "pairs")
modFit <- train(diagnosis~.,method="glm",data=training)
modelFit <- train(diagnosis~.,method="glm",data=training)
predictions <- predict(modelFit, newdata=testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- training[,grep('^IL', x = names(training) )]
View(IL)
IL <- training[,grep('IL', x = names(training) )]
View(IL)
IL <- training[,grep('^IL', x = names(training) )]
View(IL)
preProc <- preProcess(IL, method='pca', thresh=0.9, outcome=training$diagnosis)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
View(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(diagnosis~.,method="glm",data=training)
predictions <- predict(modelFit, newdata=testing)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
ILpred <- predictors[, IL]
dfIL <- <- data.frame(diagnosis, ILpred)
dfIL <- data.frame(diagnosis, ILpred)
dfIL <- data.frame(diagnosis, ILpred)
inTrain <- createDataPartition(dfIL$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
training <- dfIL[inTrain, ]
testing <- dfIL[-inTrain, ]
modelFit <- train(diagnosis~.,method="glm",data=training)
predictions <- predict(modelFit, newdata=testing)
CM1 <- confusionMatrix(predictions, testing$diagnosis)
print(CM1)
NONPCA <- CM1$overall[1]
NONPCA
modelFit <- train(training$diagnosis~.,method="glm", preProcess="pca", data=training, trControl=trainControl(preProcOptions = list(tresh=0.8)))
CM2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(CM2)
PCA <- CM2$overall[1]
PCA
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- grep("^IL", colnames(training), value=TRUE)
ILpred <- predictors[, IL]
dfIL <- data.frame(diagnosis, ILpred)
inTrain <- createDataPartition(dfIL$diagnosis, p=3/4)[[1]]
training <- dfIL[inTrain, ]
testing <- dfIL[-inTrain, ]
# build a predictive model with glm method
modelFit <- train(diagnosis~.,method="glm",data=training)
predictions <- predict(modelFit, newdata=testing)
CM1 <- confusionMatrix(predictions, testing$diagnosis)
print(CM1)
NONPCA <- CM1$overall[1]
NONPCA
modelFit <- train(training$diagnosis~.,method="glm", preProcess="pca", data=training, trControl=trainControl(preProcOptions = list(tresh=0.8)))
CM2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(CM2)
PCA <- CM2$overall[1]
PCA
