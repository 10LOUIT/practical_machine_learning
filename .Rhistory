predict(modFit, newdata=testing)
library(rpart)
modFit <- train(Species ~ ., method="rpart", data=training)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
data(iris)
library(ggplot2)
library(caret)
library(lattice)
library(caret)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(e1071)
library(rpart)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
library(rattle)
library(GTK+)
install.packages("GTK+")
library(GTK+)
library(GTK)
library(GTK+)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){ lines(1:155, ll[i,], col="grey", lwd=2)}
lines(1:155, apply(ll,2,mean)col="red", lwd=2)
lines(1:155, apply(ll,2,mean),col="red", lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
install.packages("party")
library(party)
install.packages("sandwich")
library(sandwich)
library(party)
library(grid)
library(mvtnorm)
library(modeltools)
library(stats4)
library(strucchange)
library(zoo)
library(party)
library(ElemStatLearn)
library(ElemStatLearn)
data(ozone,package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){ lines(1:155, ll[i,], col="grey", lwd=2)}
lines(1:155, apply(ll,2,mean),col="red", lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
library(caret)
library(lattice)
library(ggplot2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature, col="lightgrey", pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit, predictors),pch=19, col="red")
points(ozone$ozone,predict(treebag, predictors),pch=19, col="blue")
data("iris")
library(ggplot2)
data(iris)
data(iris)
library(ggplot2)
library(caret)
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- inTrain[inTrain,]
training <- iris[inTrain,]
testing <- iris[-inTrain,]
-inTrain
inTrain
modFit <- train(Species~ .,data=training, method="rf",prox=TRUE)
modFit <- train(Species~ .,data=training, method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred <- predict(modFit, testing)
testing$predRight <- pred=testing$Species
testing$predRight <- pred=testing$Species
testing$predRight <- pred==testing$Species
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newData Prediction")
